[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "musicgen"
version = "0.1.0"
description = "A typed, testable Python tool for MIDI analysis and arrangement generation"
authors = [
    {name = "MusicGen Team", email = "dev@musicgen.local"},
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.10"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Multimedia :: Sound/Audio :: MIDI",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "pydantic>=2.0.0",
    "typer>=0.9.0",
    "mido>=1.3.0",
    "music21>=9.1.0",
    "numpy>=1.24.0",
    "markovify>=0.9.4",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "ruff>=0.1.0",
    "pyright>=1.1.0",
]
audio-synthesis = [
    "pretty-midi>=0.2.10",
    "soundfile>=0.12.0",
    "scipy>=1.9.0",
    "pydub>=0.25.1",
]
audio-fluidsynth = [
    "pretty-midi>=0.2.10",
    "pyfluidsynth>=1.3.0",
    "pydub>=0.25.1",
]
web-ui = [
    "gradio>=4.0.0",
    "pandas>=1.5.0",
    "rich>=13.0.0",
]
all = [
    "pretty-midi>=0.2.10",
    "soundfile>=0.12.0",
    "scipy>=1.9.0",
    "pydub>=0.25.1",
    "gradio>=4.0.0",
    "pandas>=1.5.0",
    "rich>=13.0.0",
]
all-fluidsynth = [
    "pretty-midi>=0.2.10",
    "pyfluidsynth>=1.3.0",
    "soundfile>=0.12.0",
    "scipy>=1.9.0",
    "pydub>=0.25.1",
    "gradio>=4.0.0",
    "pandas>=1.5.0",
    "rich>=13.0.0",
]

[project.scripts]
musicgen = "musicgen.cli:main"

[project.urls]
Homepage = "https://github.com/musicgen/musicgen"
Repository = "https://github.com/musicgen/musicgen.git"
Issues = "https://github.com/musicgen/musicgen/issues"

[tool.ruff]
target-version = "py310"
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

[tool.pyright]
include = ["musicgen"]
exclude = ["**/__pycache__"]
venvPath = "."
venv = ".venv"
pythonVersion = "3.10"
typeCheckingMode = "strict"
reportMissingImports = true
reportMissingTypeStubs = false
reportGeneralTypeIssues = true
reportUnusedImport = true
reportUnusedClass = true
reportUnusedFunction = true
reportUnusedVariable = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --cov=musicgen --cov-report=term-missing"
